package simplejson

import (
	"fmt"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/sindbach/json-to-bson-go/jsonutil"
)

func Convert(jsonStr []byte) (string, error) {
	input, err := jsonutil.Unmarshal(jsonStr)
	if err != nil {
		return "", err
	}

	var fields []Code
	for _, key := range input.Keys() {
		val, _ := input.Get(key)

		elem := Id(strings.Title(key))
		switch converted := val.(type) {
		case string:
			elem.Add(String())
		case bool:
			elem.Add(Bool())
		case float64:
			switch {
			case float64(int32(converted)) == converted:
				elem.Add(Int32())
			case float64(int64(converted)) == converted:
				elem.Add(Int64())
			default:
				elem.Add(Float64())
			}
		default:
			return "", fmt.Errorf("value for key %q has unrecognized type %T", key, val)
		}

		fields = append(fields, elem)
	}

	output := NewFile("main")
	output.Type().Id("AutoGenerated").Struct(fields...)
	return output.GoString(), nil
}
